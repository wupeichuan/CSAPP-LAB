                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41002000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66801000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f9ffffffffffffffff | 	irmovq $-1, %r9
0x03e: 6092                 | 	addq %r9, %rdx
0x040: 30f80200000000000000 | 	irmovq $2, %r8
0x04a: 30f91000000000000000 | 	irmovq $16, %r9
0x054: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x056: 71c600000000000000   | 	jle Done_1		# if so, goto Done:
                            | 	
0x05f: 50a70000000000000000 | Loop_1:	mrmovq (%rdi), %r10	# read val from src...
0x069: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x073: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x07d: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x087: 62aa                 | 	andq %r10, %r10		# val_1 <= 0?
0x089: 719e00000000000000   | 	jle Npos_1		# if so, goto Npos_1:
0x092: 30fa0100000000000000 | 	irmovq $1, %r10
0x09c: 60a0                 | 	addq %r10, %rax		# count++
0x09e:                      | Npos_1:	
0x09e: 62bb                 | 	andq %r11, %r11		# val_2 <= 0?
0x0a0: 71b500000000000000   | 	jle Npos_2		# if so, goto Npos_1:
0x0a9: 30fa0100000000000000 | 	irmovq $1, %r10
0x0b3: 60a0                 | 	addq %r10, %rax
0x0b5:                      | Npos_2:
0x0b5: 6182                 | 	subq %r8, %rdx		# len--
0x0b7: 6097                 | 	addq %r9, %rdi		# src++
0x0b9: 6096                 | 	addq %r9, %rsi		# dst++
0x0bb: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x0bd: 765f00000000000000   | 	jg Loop_1			# if so, goto Loop:
0x0c6:                      | Done_1:
0x0c6: 30f90100000000000000 | 	irmovq $1, %r9
0x0d0: 6092                 | 	addq %r9, %rdx
0x0d2: 6222                 | 	andq %rdx, %rdx
0x0d4: 712d01000000000000   | 	jle Done
0x0dd:                      | Loop_2:	
0x0dd: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0e7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0f1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0f3: 710801000000000000   | 	jle Npos_3		# if so, goto Npos:
0x0fc: 30fa0100000000000000 | 	irmovq $1, %r10
0x106: 60a0                 | 	addq %r10, %rax		# count++
0x108: 30fa0100000000000000 | Npos_3:	irmovq $1, %r10
0x112: 61a2                 | 	subq %r10, %rdx		# len--
0x114: 30fa0800000000000000 | 	irmovq $8, %r10
0x11e: 60a7                 | 	addq %r10, %rdi		# src++
0x120: 60a6                 | 	addq %r10, %rsi		# dst++
0x122: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x124: 76dd00000000000000   | 	jg Loop_2			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x12d:                      | Done:
0x12d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x12e:                      | End:
                            | #/* $end ncopy-ys */
0x12e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x130:                      | 	.align 8
0x130:                      | src:
0x130: 0100000000000000     | 	.quad 1
0x138: 0200000000000000     | 	.quad 2
0x140: fdffffffffffffff     | 	.quad -3
0x148: fcffffffffffffff     | 	.quad -4
0x150: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x160:                      | 	.align 16
0x160:                      | Predest:
0x160: fadebc0000000000     | 	.quad 0xbcdefa
0x168:                      | dest:
0x168: abefcd0000000000     | 	.quad 0xcdefab
0x170: abefcd0000000000     | 	.quad 0xcdefab
0x178: abefcd0000000000     | 	.quad 0xcdefab
0x180: abefcd0000000000     | 	.quad 0xcdefab
0x188:                      | Postdest:
0x188: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x190:                      | .align 8
                            | # Run time stack
0x190: 0000000000000000     | 	.quad 0
0x198: 0000000000000000     | 	.quad 0
0x1a0: 0000000000000000     | 	.quad 0
0x1a8: 0000000000000000     | 	.quad 0
0x1b0: 0000000000000000     | 	.quad 0
0x1b8: 0000000000000000     | 	.quad 0
0x1c0: 0000000000000000     | 	.quad 0
0x1c8: 0000000000000000     | 	.quad 0
0x1d0: 0000000000000000     | 	.quad 0
0x1d8: 0000000000000000     | 	.quad 0
0x1e0: 0000000000000000     | 	.quad 0
0x1e8: 0000000000000000     | 	.quad 0
0x1f0: 0000000000000000     | 	.quad 0
0x1f8: 0000000000000000     | 	.quad 0
0x200: 0000000000000000     | 	.quad 0
0x208: 0000000000000000     | 	.quad 0
                            | 
0x210:                      | Stack:
