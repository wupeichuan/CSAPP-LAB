                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4b805000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f63803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 30f9ffffffffffffffff | 	irmovq $-1, %r9
0x03e: 6092                 | 	addq %r9, %rdx
0x040: 30f80200000000000000 | 	irmovq $2, %r8
0x04a: 30f91000000000000000 | 	irmovq $16, %r9
0x054: 6222                 | 	andq %rdx,%rdx		# len <= 0?
0x056: 71c600000000000000   | 	jle Done_1		# if so, goto Done:
                            | 	
0x05f: 50a70000000000000000 | Loop_1:	mrmovq (%rdi), %r10	# read val from src...
0x069: 50b70800000000000000 | 	mrmovq 8(%rdi), %r11
0x073: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x07d: 40b60800000000000000 | 	rmmovq %r11, 8(%rsi)	# ...and store it to dst
0x087: 62aa                 | 	andq %r10, %r10		# val_1 <= 0?
0x089: 719e00000000000000   | 	jle Npos_1		# if so, goto Npos_1:
0x092: 30fa0100000000000000 | 	irmovq $1, %r10
0x09c: 60a0                 | 	addq %r10, %rax		# count++
0x09e:                      | Npos_1:	
0x09e: 62bb                 | 	andq %r11, %r11		# val_2 <= 0?
0x0a0: 71b500000000000000   | 	jle Npos_2		# if so, goto Npos_1:
0x0a9: 30fa0100000000000000 | 	irmovq $1, %r10
0x0b3: 60a0                 | 	addq %r10, %rax
0x0b5:                      | Npos_2:
0x0b5: 6182                 | 	subq %r8, %rdx		# len--
0x0b7: 6097                 | 	addq %r9, %rdi		# src++
0x0b9: 6096                 | 	addq %r9, %rsi		# dst++
0x0bb: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x0bd: 765f00000000000000   | 	jg Loop_1			# if so, goto Loop:
0x0c6:                      | Done_1:
0x0c6: 30f90100000000000000 | 	irmovq $1, %r9
0x0d0: 6092                 | 	addq %r9, %rdx
0x0d2: 6222                 | 	andq %rdx, %rdx
0x0d4: 712d01000000000000   | 	jle Done
0x0dd:                      | Loop_2:	
0x0dd: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0e7: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
0x0f1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0f3: 710801000000000000   | 	jle Npos_3		# if so, goto Npos:
0x0fc: 30fa0100000000000000 | 	irmovq $1, %r10
0x106: 60a0                 | 	addq %r10, %rax		# count++
0x108: 30fa0100000000000000 | Npos_3:	irmovq $1, %r10
0x112: 61a2                 | 	subq %r10, %rdx		# len--
0x114: 30fa0800000000000000 | 	irmovq $8, %r10
0x11e: 60a7                 | 	addq %r10, %rdi		# src++
0x120: 60a6                 | 	addq %r10, %rsi		# dst++
0x122: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x124: 76dd00000000000000   | 	jg Loop_2			# if so, goto Loop:
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x12d:                      | Done:
0x12d: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x12e:                      | End:
                            | #/* $end ncopy-ys */
0x12e:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x130:                      | 	.align 8
0x130:                      | src:
0x130: ffffffffffffffff     | 	.quad -1
0x138: 0200000000000000     | 	.quad 2
0x140: 0300000000000000     | 	.quad 3
0x148: 0400000000000000     | 	.quad 4
0x150: 0500000000000000     | 	.quad 5
0x158: 0600000000000000     | 	.quad 6
0x160: 0700000000000000     | 	.quad 7
0x168: f8ffffffffffffff     | 	.quad -8
0x170: 0900000000000000     | 	.quad 9
0x178: f6ffffffffffffff     | 	.quad -10
0x180: f5ffffffffffffff     | 	.quad -11
0x188: f4ffffffffffffff     | 	.quad -12
0x190: 0d00000000000000     | 	.quad 13
0x198: 0e00000000000000     | 	.quad 14
0x1a0: f1ffffffffffffff     | 	.quad -15
0x1a8: f0ffffffffffffff     | 	.quad -16
0x1b0: efffffffffffffff     | 	.quad -17
0x1b8: 1200000000000000     | 	.quad 18
0x1c0: 1300000000000000     | 	.quad 19
0x1c8: 1400000000000000     | 	.quad 20
0x1d0: 1500000000000000     | 	.quad 21
0x1d8: 1600000000000000     | 	.quad 22
0x1e0: e9ffffffffffffff     | 	.quad -23
0x1e8: e8ffffffffffffff     | 	.quad -24
0x1f0: e7ffffffffffffff     | 	.quad -25
0x1f8: e6ffffffffffffff     | 	.quad -26
0x200: e5ffffffffffffff     | 	.quad -27
0x208: 1c00000000000000     | 	.quad 28
0x210: e3ffffffffffffff     | 	.quad -29
0x218: 1e00000000000000     | 	.quad 30
0x220: 1f00000000000000     | 	.quad 31
0x228: 2000000000000000     | 	.quad 32
0x230: 2100000000000000     | 	.quad 33
0x238: 2200000000000000     | 	.quad 34
0x240: ddffffffffffffff     | 	.quad -35
0x248: 2400000000000000     | 	.quad 36
0x250: dbffffffffffffff     | 	.quad -37
0x258: daffffffffffffff     | 	.quad -38
0x260: d9ffffffffffffff     | 	.quad -39
0x268: d8ffffffffffffff     | 	.quad -40
0x270: 2900000000000000     | 	.quad 41
0x278: d6ffffffffffffff     | 	.quad -42
0x280: d5ffffffffffffff     | 	.quad -43
0x288: 2c00000000000000     | 	.quad 44
0x290: 2d00000000000000     | 	.quad 45
0x298: d2ffffffffffffff     | 	.quad -46
0x2a0: d1ffffffffffffff     | 	.quad -47
0x2a8: 3000000000000000     | 	.quad 48
0x2b0: cfffffffffffffff     | 	.quad -49
0x2b8: 3200000000000000     | 	.quad 50
0x2c0: cdffffffffffffff     | 	.quad -51
0x2c8: 3400000000000000     | 	.quad 52
0x2d0: cbffffffffffffff     | 	.quad -53
0x2d8: caffffffffffffff     | 	.quad -54
0x2e0: c9ffffffffffffff     | 	.quad -55
0x2e8: 3800000000000000     | 	.quad 56
0x2f0: c7ffffffffffffff     | 	.quad -57
0x2f8: 3a00000000000000     | 	.quad 58
0x300: c5ffffffffffffff     | 	.quad -59
0x308: c4ffffffffffffff     | 	.quad -60
0x310: c3ffffffffffffff     | 	.quad -61
0x318: 3e00000000000000     | 	.quad 62
0x320: 3f00000000000000     | 	.quad 63
0x328: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x330:                      | 	.align 16
0x330:                      | Predest:
0x330: fadebc0000000000     | 	.quad 0xbcdefa
0x338:                      | dest:
0x338: abefcd0000000000     | 	.quad 0xcdefab
0x340: abefcd0000000000     | 	.quad 0xcdefab
0x348: abefcd0000000000     | 	.quad 0xcdefab
0x350: abefcd0000000000     | 	.quad 0xcdefab
0x358: abefcd0000000000     | 	.quad 0xcdefab
0x360: abefcd0000000000     | 	.quad 0xcdefab
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388: abefcd0000000000     | 	.quad 0xcdefab
0x390: abefcd0000000000     | 	.quad 0xcdefab
0x398: abefcd0000000000     | 	.quad 0xcdefab
0x3a0: abefcd0000000000     | 	.quad 0xcdefab
0x3a8: abefcd0000000000     | 	.quad 0xcdefab
0x3b0: abefcd0000000000     | 	.quad 0xcdefab
0x3b8: abefcd0000000000     | 	.quad 0xcdefab
0x3c0: abefcd0000000000     | 	.quad 0xcdefab
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530:                      | Postdest:
0x530: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x538:                      | .align 8
                            | # Run time stack
0x538: 0000000000000000     | 	.quad 0
0x540: 0000000000000000     | 	.quad 0
0x548: 0000000000000000     | 	.quad 0
0x550: 0000000000000000     | 	.quad 0
0x558: 0000000000000000     | 	.quad 0
0x560: 0000000000000000     | 	.quad 0
0x568: 0000000000000000     | 	.quad 0
0x570: 0000000000000000     | 	.quad 0
0x578: 0000000000000000     | 	.quad 0
0x580: 0000000000000000     | 	.quad 0
0x588: 0000000000000000     | 	.quad 0
0x590: 0000000000000000     | 	.quad 0
0x598: 0000000000000000     | 	.quad 0
0x5a0: 0000000000000000     | 	.quad 0
0x5a8: 0000000000000000     | 	.quad 0
0x5b0: 0000000000000000     | 	.quad 0
                            | 
0x5b8:                      | Stack:
